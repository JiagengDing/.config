# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
source "${ZINIT_HOME}/zinit.zsh"

source ~/.config/zsh/vi.zsh
source ~/.config/zsh/fzf.zsh

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
# export ZSH="/Users/JiagengDing/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="awesomepanda"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# # Which plugins would you like to load?
# # Standard plugins can be found in $ZSH/plugins/
# # Custom plugins may be added to $ZSH_CUSTOM/plugins/
# # Example format: plugins=(rails git textmate ruby lighthouse)
# # Add wisely, as too many plugins slow down shell startup.
# plugins=(git
#         zsh-syntax-highlighting
#         zsh-autosuggestions
#       )
# # plugins=(zsh-syntax-highlighting)
# # plugins=(zsh-autosuggestions)

# source $ZSH/oh-my-zsh.sh


##################################3
#zinit
#################################33

# Load powerlevel10k theme
zinit ice depth=1
zinit light romkatv/powerlevel10k

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.config/.p10k.zsh ]] || source ~/.config/.p10k.zsh

# A.
setopt promptsubst

# B.
zinit wait lucid for \
        OMZL::git.zsh \
        OMZL::history.zsh \
        OMZL::key-bindings.zsh \
        OMZL::theme-and-appearance.zsh \
				OMZP::sudo/sudo.plugin.zsh \
				atload"_zsh_autosuggest_start" \
							 zsh-users/zsh-autosuggestions \
				blockf atpull'zinit creinstall -q .' \
									    zsh-users/zsh-completions
  # atload"unalias grv" \
  #       OMZP::git

PS1="READY >" # provide a simple prompt till the theme loads

# C.
zinit wait'!' lucid for \
		OMZL::prompt_info_functions.zsh \
		OMZT::gnzh

# D.
zinit wait lucid for \
  atinit"zicompinit; zicdreplay"  \
        zdharma-continuum/fast-syntax-highlighting \
      OMZP::colored-man-pages \
  as"completion" \
        OMZP::docker/_docker


# # 快速目录跳转
# zinit ice lucid wait='1'
# zinit light skywind3000/z.lua
#
# # 语法高亮
# zinit ice lucid wait='0' atinit='zpcompinit'
# zinit light zdharma/fast-syntax-highlighting
#
# # 自动建议
# zinit ice lucid wait="0" atload='_zsh_autosuggest_start'
# zinit light zsh-users/zsh-autosuggestions
#
# # 补全
# zinit ice lucid wait='0'
# zinit light zsh-users/zsh-completions
#
# # 加载 OMZ 框架及部分插件
# zinit snippet OMZL::completion.zsh
# zinit snippet OMZL::history.zsh
# zinit snippet OMZL::key-bindings.zsh
# zinit snippet OMZL::theme-and-appearance.zsh
# zinit snippet OMZP::colored-man-pages/colored-man-pages.plugin.zsh
# zinit snippet OMZP::sudo/sudo.plugin.zsh
#
# zinit ice svn
# zinit snippet OMZP::extract
#
# zinit ice lucid wait='1'
# zinit snippet OMZP::git/git.plugin.zsh


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"


# 启动代理
proxy () {
  # export all_proxy=socks5://127.0.0.1:1080
	# export https_proxy=http://128.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890
	export https_proxy=http://127.0.0.1:7891 http_proxy=http://127.0.0.1:7891 all_proxy=socks5://127.0.0.1:7890
  echo "Proxy on"
}

# 关闭代理
noproxy () {
  unset http_proxy
  unset https_proxy
  unset all_proxy
  echo "Proxy off"
}

# arch upgrade
archup(){
	sudo pacman -Syyu
  zinit self-update && zinit update
	pip install --upgrade pip pip-review
	pip-review --auto
	cd .config && git pull
	comm -23 <(pacman -Qeq|sort) <(pacman -Qmq|sort) > official-arch-pkglist
	(yay -Qeq|sort) > all-arch-pkglist
	pip list > python-pkglist
	cd nvim && git pull
	cd ~
	neofetch
}

# debian upgrade
debup(){
	sudo apt update && sudo apt upgrade
  zinit self-update && zinit update
	pip install --upgrade pip
	pip-review --auto
	cd .config && git pull
	cd nvim && git pull
	cd ~
	neofetch
}

# mac upgrade
upp(){
	brew update && brew upgrade
	brew cu -a -y
	# mas upgrade
	brew cleanup
	npm install -g npm
	# cnpm update joplin -g
	cd ~/.config
	mv Brewfile ~/.Trash
	brew bundle dump
  zinit self-update && zinit update
	cd ~
	pip install --upgrade pip
	pip-review --auto
	cd .config && git pull
	cd nvim && git pull
	cd ~
	echo "Upgrade completed"
	neofetch
}

# homebrew upgrade
up(){
	# brew upgrade firefox brave-browser
	# export https_proxy=http://127.0.0.1:7891 http_proxy=http://127.0.0.1:7891 all_proxy=socks5://127.0.0.1:7890
  # echo "Proxy on"
	brew update
	brew upgrade --greedy
	brew cu -a -y
	# mas upgrade
	brew cleanup
	# npm install -g npm
	cnpm update joplin -g
	cd ~/.config
	mv Brewfile ~/.Trash
	brew bundle dump
  zinit self-update && zinit update --parallel
	noproxy
	cd ~
	pip3 install --upgrade pip
	pip-review --local --interactive
	sudo softwareupdate -i -a
	clear
	echo "Upgrade completed"
	neofetch
}


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
alias zr='nvim ~/.config/zsh/zshrc'
alias szr='source ~/.zshrc'
# alias l='ls -al'
alias ls='exa'
alias l='exa --long --all --git --time-style iso'
# alias cd='z'
# alias cat='bat'
alias r=ranger
alias i=ipython
alias j=julia
alias m='matlab -nodesktop -nosplash'
alias c='clear'
# alias up='proxy && brew update && brew upgrade && brew cu -a -y && mas upgrade && brew cleanup'
# alias pr='export ALL_PROXY=socks5://127.0.0.1:1080'

alias s=neofetch
alias vi=/bin/vim
alias vim=nvim
alias ml='matlab -nodesktop -nosplash'

alias lg='lazygit'
alias gp='git push'
alias gs='git status'
alias ga='git add'
alias gc='git commit -m'

alias H='cd ~'
alias cc='cd ~/.config'
alias D='cd ~/Desktop'

alias zinitup='zinit self-update && zinit update --parallel'

alias o=joplin
alias oe='joplin edit'
alias oc='joplin cat'
alias os='joplin status'
alias oex='joplin export --format md'
alias om='joplin mknote'
alias ot='joplin mktodo'
alias oo='joplin mknote `date +%Y/%m/%d`'
alias ol='joplin ls -l'
alias oss='joplin sync'
alias oh='joplin help all'

alias ch='/Applications/Chromium.app/Contents/MacOS/Chromium'

alias b2='backblaze-b2'

#防止出现删除错误的问题
# alias rm='deletefile'
alias rl='trashlist'
alias ur='undeletefile'
alias mycl='cleartrash'
#替换rm指令移动文件到~/.trash/中
deletefile()
{
   mv $@  ~/.local/share/Trash/files
}
#显示~/.trash/中内容
trashlist()
{
   echo -e "\a[========================== ls trash ==========================]"
   ls -ail  ~/.local/share/Trash/files
   echo -e "\a[==========================  ls end ===========================]"
}
#将被删除文件还原到当前目录
undeletefile()
{
   mv -i ~/.local/share/Trash/files/$@ ./
}
#清空回收站
cleartrash()
{
   echo -ne "\a[====================== Clear ~/.trash, Sure? =================] [y/n] >_"
   read confirm
   if [ $confirm == 'y' -o $confirm == 'Y' ] ;then
      /bin/rm -rf ~/.local/share/Trash/files/*
      /bin/rm -rf ~/.local/share/Trash/files/.* 2>/dev/null
      echo -e "\a[===================== Clear Successfully =====================]\a"
   fi
}
# 结束


# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
### End of Zinit's installer chunk

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
#
PATH=$PATH:~/.local/bin

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
